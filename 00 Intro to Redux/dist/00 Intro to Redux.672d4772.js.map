{"mappings":"AAAA,IAAI,aAAa;IACf,OAAO;IACP,MAAM;IACN,KAAK;AACP;AACA;;;;GAIG,GACH;;;;;;;;;;;;oBAYoB,GAEpB,uCAAuC;AAEvC,SAAS,QAAQ,KAAK,EAAE,MAAM;IAC5B,QAAQ,GAAG,CAAC;IAEZ,IAAI,OAAO,IAAI,KAAK,kBAClB,OAAO;QAAE,GAAG,KAAK;QAAE,OAAO,MAAM,KAAK,GAAG;IAAE;SACrC,IAAI,OAAO,IAAI,KAAK,kBACzB,OAAO;QAAE,GAAG,KAAK;QAAE,OAAO,MAAM,KAAK,GAAG;IAAE;SACrC,IAAI,OAAO,IAAI,KAAK,qBACzB,OAAO;QAAE,GAAG,KAAK;QAAE,OAAO,MAAM,KAAK,GAAG,OAAO,OAAO;IAAC;IAGzD,OAAO;AACT;AAEA,qBAAqB;AACrB,aAAa,QAAQ,YAAY;IAAE,MAAM;AAAiB;AAC1D,aAAa,QAAQ,YAAY;IAAE,MAAM;AAAiB;AAC1D,aAAa,QAAQ,YAAY;IAAE,MAAM;AAAiB;AAC1D,aAAa,QAAQ,YAAY;IAAE,MAAM;IAAqB,SAAS;AAAE;AACzE,QAAQ,GAAG,CAAC,aAEZ;;;;;;;;;AASA","sources":["script.js"],"sourcesContent":["let reduxState = {\r\n  count: 0,\r\n  name: \"aditya\",\r\n  age: 32,\r\n};\r\n/* let state = {\r\n  count: 0,\r\n  name: \"aditya\",\r\n  age: 32,\r\n}; */\r\n/* \r\nfunction increment() {\r\n  //   state.count = state.count + 1; //Mutating State\r\n\r\n  //   Non Mutating State - Replacing the object\r\n  state = {\r\n    ...state,\r\n    count: state.count + 1,\r\n  };\r\n}\r\nincrement();\r\nincrement();\r\nconsole.log(state); */\r\n\r\n// redux calls state updater as reducer\r\n\r\nfunction reducer(state, action) {\r\n  console.log(action);\r\n\r\n  if (action.type === \"count/increase\") {\r\n    return { ...state, count: state.count + 1 };\r\n  } else if (action.type === \"count/decrease\") {\r\n    return { ...state, count: state.count - 1 };\r\n  } else if (action.type === \"count/incrementBy\") {\r\n    return { ...state, count: state.count + action.payload };\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\n// What Redux will do\r\nreduxState = reducer(reduxState, { type: \"count/increase\" });\r\nreduxState = reducer(reduxState, { type: \"count/increase\" });\r\nreduxState = reducer(reduxState, { type: \"count/decrease\" });\r\nreduxState = reducer(reduxState, { type: \"count/incrementBy\", payload: 7 });\r\nconsole.log(reduxState);\r\n\r\n/* \r\nIn a nutshell, a reducer is a function that takes two arguments: state and action.\r\n\r\nstate refers to the current state (or the initial state when the app first runs).\r\n\r\naction is an object that typically contains a type (which describes what kind of change we want to make) and optionally a payload, which holds the data needed to perform that change.\r\n\r\nThe reducer function looks at the action.type and returns a new updated state based on it. The reducer must be a pure function, meaning it doesn't modify the original state but instead returns a new one.\r\n\r\n*/\r\n"],"names":[],"version":3,"file":"00 Intro to Redux.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}